

2.编程求解汉诺塔问题。
汉诺塔（Hanoi）是必须用递归方法才能解决的经典问题。它来自于印度神话。上帝创造世界时作了三根金刚石柱子，在第一根柱子上从下往上按大小顺序摞着64片黄金圆盘，如图7-3所示。上帝命令婆罗门把圆盘从下面开始按大小顺序重新摆放到第二根柱子上，并且规定，每次只能移动一个圆盘，在小圆盘上不能放大圆盘。有人预言说，这件事完成时宇宙会在一瞬间闪电式毁灭，也有人相信婆罗门至今仍在一刻不停地搬动着圆盘。
**输入格式要求："%d" 提示信息："Input the number of disks:"
**输出格式要求："Steps of moving %d disks from A to B by means of C:\n" "Move %d: from %c to %c\n"
程序运行示例如下：
Input the number of disks:3
Steps of moving 3 disks from A to B by means of C:
Move 1: from A to B
Move 2: from A to C
Move 1: from B to C
Move 3: from A to B
Move 1: from C to A
Move 2: from C to B
Move 1: from A to B

#include<stdio.h>
#include<stdlib.h>
Hanoi(int n,char k,char z,char j);
int main()
{
    int n;
    printf("Input the number of disks:");
    scanf("%d",&n);
    printf("Steps of moving %d disks from A to B by means of C:\n",n);
    Hanoi(n,'A','C','B');
    return 0;
}
Hanoi(int n,char k,char z,char j)
{
    if(n==1)
    {
        printf("from %c to %c\n",k,j);
        return 0;
    }
    Hanoi(n-1,k,j,z);
    printf("from %c to %c\n",k,j);
    Hanoi(n-1,z,k,j);
    return 0;
}



梯形法
#include <stdio.h>
float Fun1(float x);
float Fun2(float x);
float Integral(float (*f)(float), float a, float b);
int main()
{	   		      
    float y1, y2;
    y1 = Integral(Fun1, 0.0, 1.0);
    y2 = Integral(Fun2, 0.0, 3.0);
    printf("y1=%f\ny2=%f\n", y1, y2);
    return 0;
}	   		      
/*  函数功能：计算函数1+x*x的函数值 */
float Fun1(float x)
{	   		      
    return  1 + x * x;
}	   		      
/*  函数功能：计算函数x/(1+x*x)的函数值 */
float Fun2(float x)
{	   		      
    return x / (1 + x * x);
}	   		      
/*    函数功能：用梯形法计算函数的定积分 */
float Integral(float (*f)(float), float a, float b)
{	   		      
    float s, h;
    int n = 100, i;
    s = ((*f)(a) + (*f)(b)) / 2;
    h = (b - a) / n;
    for (i = 1; i < n; i++)
    {	   		      
        s += (*f)(a + i * h);
    }
    return s * h;
}	   		      




